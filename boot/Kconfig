menu "Boot options"

choice CHIP
bool "Chip Select"
help
    The chip select only used for 'flatted device tree', 
    preload and "make run"
    
config CHIP_ESP32
    depends on ARCH_XTENSA
    bool "esp32"
    
config CHIP_ESP8266
    depends on ARCH_XTENSA
    bool "esp8266"

config CHIP_GX6605S
    depends on CPU_CK610
    bool "NationalChip gx6605s"

config CHIP_STM32
    depends on ARCH_ARME
    bool "Stm32 Series"

config CHIP_SUNXIF1
    depends on ARCH_ARM_926EJS
    bool "Sunxi-F1 Series"
    
config CHIP_SUNXIH3
    depends on ARCH_ARMV7A
    bool "Sunxi-H3 Series"

config CHIP_X86
    depends on ARCH_X86
    bool "X86"
        
endchoice 

config PACK_KERNEL
    bool "None"
    depends on !XIP
    help
    uncompressed kernel image. This option is usually used for 
    on-chip execution.
    
choice
    prompt "Kernel compression mode"
    depends on PACK_KERNEL
    default PACK_GZIP
    help
    The linux kernel is a kind of self-extracting executable.
    Several compression algorithms are available, which differ
    in efficiency, compression and decompression speed.
    Compression speed is only relevant when building a kernel.
    Decompression speed is relevant at each boot.

    If you have any problems with bzip2 or lzma compressed
    kernels, mail me (Alain Knaff) <alain@knaff.lu>. (An older
    version of this functionality (bzip2 only), for 2.4, was
    supplied by Christian Ludwig)

    High compression options are mostly useful for users, who
    are low on disk space (embedded systems), but for whom ram
    size matters less.

    If in doubt, select 'gzip'

config PACK_GZIP
    bool "Gzip"
    help
    The old and tried gzip compression. It provides a good balance
    between compression ratio and decompression speed.

config PACK_BZIP2
    bool "Bzip2"
    help
    Its compression ratio and speed is intermediate.
    Decompression speed is slowest among the choices.  The kernel
    size is about 10% smaller with bzip2, in comparison to gzip.
    Bzip2 uses a large amount of memory. For modern kernels you
    will need at least 8MB RAM or more for booting.

config PACK_LZMA
    bool "LZMA"
    help
    This compression algorithm's ratio is best.  Decompression speed
    is between gzip and bzip2.  Compression is slowest.
    The kernel size is about 33% smaller with LZMA in comparison to gzip.

config PACK_XZ
    bool "XZ"
    help
    XZ uses the LZMA2 algorithm and instruction set specific
    BCJ filters which can improve compression ratio of executable
    code. The size of the kernel is about 30% smaller with XZ in
    comparison to gzip. On architectures for which there is a BCJ
    filter (i386, x86_64, ARM, IA-64, PowerPC, and SPARC), XZ
    will create a few percent smaller kernel than plain LZMA.

    The speed is about the same as with LZMA: The decompression
    speed of XZ is better than that of bzip2 but worse than gzip
    and LZO. Compression is slow.

config PACK_LZO
    bool "LZO"
    help
    Its compression ratio is the poorest among the choices. The kernel
    size is about 10% bigger than gzip; however its speed
    (both compression and decompression) is the fastest.

config PACK_LZ4
    bool "LZ4"
    help
    LZ4 is an LZ77-type compressor with a fixed, byte-oriented encoding.
    A preliminary version of LZ4 de/compression tool is available at
    <https://code.google.com/p/lz4/>.

    Its compression ratio is worse than LZO. The size of the kernel
    is about 8% bigger than LZO. But the decompression speed is
    faster than LZO.

config PACK_ZSTD
    bool "ZSTD"
    help
    ZSTD is a compression algorithm targeting intermediate compression
    with fast decompression speed. It will compress better than GZIP and
    decompress around the same speed as LZO, but slower than LZ4. You
    will need at least 192 KB RAM or more for booting. The zstd command
    line tool is required for compression.
    
endchoice

source "boot/kboot/Kconfig"

source "boot/preload/Kconfig"

endmenu


config BOOT_HAS_MAP     # Bootloader maps 
bool
